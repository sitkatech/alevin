@*-----------------------------------------------------------------------
    <copyright file="FactSheet.cshtml" company="Tahoe Regional Planning Agency and Sitka Technology Group">
    Copyright (c) Tahoe Regional Planning Agency and Sitka Technology Group. All rights reserved.
    <author>Sitka Technology Group</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using ProjectFirmaModels.Models
@using ProjectFirma.Web.Views.Project
@using ProjectFirma.Web.Views.Shared
@using LtInfo.Common
@using LtInfo.Common.Views
@using MoreLinq
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using ProjectFirma.Web.Common
@using ProjectFirma.Web.Models
@inherits BackwardLookingFactSheet

@{
    @SetLayout("~/Views/Shared/NavAndHeaderLayout.cshtml", ViewDataTyped)
}

@section JavascriptAndStylesContent
{
    <link href="@Url.Content("~/Content/css/ProjectFirmaPrint.css")" rel="stylesheet" type="text/css" media="print" />
    <style>
        .projectTaxonomy {
            background-color: @ViewDataTyped.TaxonomyColor !important;
            color: white !important;
        }

        h1, h2, h3, h4, h5 {
            color:  @ViewDataTyped.TaxonomyColor !important;
        }

        .headerPanel
        {
            border-left: 3px solid @ViewDataTyped.TaxonomyColor;
        }
    </style>

    @{ MapJavascriptIncludes.RenderPartialView(Html); }

    <script type="text/javascript" src="https://www.google.com/jsapi"></script>
    <script type="text/javascript">
        google.load("visualization", "1", {packages:["corechart"]});
        google.setOnLoadCallback(drawChart);

        function drawChart() {
            var chartJson = @Html.Raw(JObject.FromObject(ViewDataTyped.GoogleChartJson).ToString());
            var chartWrapper = new google.visualization.ChartWrapper(chartJson);
            chartWrapper.draw();
        }
    </script>
}

<div class="container noPrint">
    <div style="margin: 15px 0;">
        <div class="pull-right">
            <a class="btn btn-firma" href="@ViewDataTyped.Project.GetDetailUrl()">@FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel() Details</a>
            <a class="btn btn-firma" href="@ViewDataTyped.FactSheetPdfUrl"><span class="glyphicon glyphicon-print"></span> Print to PDF</a>
        </div>
    </div>
</div>

<div class="container factSheet">
    <div class="row section">
        <div class="col-sm-2 col-md-2">
            <img style="max-height: 200px; margin: 30px auto 10px auto" class="img-responsive factSheetPrimaryLogo" src="@MultiTenantHelpers.GetTenantSquareLogoUrl()" alt="@MultiTenantHelpers.GetTenantShortDisplayName()" />
			@if (MultiTenantHelpers.ShowLeadImplementerLogoOnFactSheet() && ViewDataTyped.Project.GetPrimaryContactOrganizationLogo() != null)
            {
                @*If the logo is not null then perforce the organization must not be null, so this is fine.*@
                <img style="max-height: 200px; margin: 20px auto" class="img-responsive factSheetSecondaryLogo" src="@ViewDataTyped.Project.GetPrimaryContactOrganizationLogo().GetFileResourceUrl()" alt="@ViewDataTyped.Project.GetPrimaryContactOrganization().GetDisplayNameWithoutAbbreviation()" />
            }
        </div>
        <div class="col-sm-10 col-md-10 headerPanel">
            <h2>@ViewDataTyped.Project.ProjectName</h2>
            <div class="row">
                <div class="col-xs-12 col-sm-4 col-md-3">
                    <strong>@ViewDataTyped.TaxonomyLeafDisplayName</strong>
                </div>
                <div class="col-xs-12 col-sm-8 col-md-9">
                    @ViewDataTyped.TaxonomyLeafName
                </div>
            </div>
            @{
                var stewardingOrganization = ViewDataTyped.Project.GetCanStewardProjectsOrganization();
            }
            @if (stewardingOrganization != null)
            {
                <div class="row">
                    <div class="col-xs-12 col-sm-4 col-md-3">
                        <strong>@FieldDefinitionEnum.ProjectsStewardOrganizationRelationshipToProject.ToType().GetFieldDefinitionLabel()</strong>
                    </div>
                    <div class="col-xs-12 col-sm-8 col-md-9">
                        @ViewDataTyped.Project.GetPrimaryContactOrganization().OrganizationName
                    </div>
                </div>
            }
            @{
                var primaryContactOrganization = ViewDataTyped.Project.GetPrimaryContactOrganization();
            }
            @if (primaryContactOrganization != null)
            {
                <div class="row">
                    <div class="col-xs-12 col-sm-4 col-md-3">
                        @* <strong>Lead Implementer</strong> *@
                        <strong>@FieldDefinitionEnum.IsPrimaryContactOrganization.ToType().GetFieldDefinitionLabel()</strong>

                    </div>
                    <div class="col-xs-12 col-sm-8 col-md-9">
                        @ViewDataTyped.Project.GetPrimaryContactOrganization().OrganizationName
                    </div>
                </div>
            }
            @{
                var projectFundingOrganizationNamesForFactSheet = ViewDataTyped.Project.GetFundingOrganizationNamesForFactSheet();
            }
            @if (projectFundingOrganizationNamesForFactSheet != string.Empty)
            {
                <div class="row">
                    <div class="col-xs-12 col-sm-4 col-md-3">
                        <strong>Funders</strong>
                    </div>
                    <div class="col-xs-12 col-sm-8 col-md-9">
                        @projectFundingOrganizationNamesForFactSheet
                    </div>
                </div>
            }

            @{
                var projectOtherOrganizationNamesForFactSheet = ViewDataTyped.Project.GetProjectOrganizationNamesForFactSheet();
            }
            @if (projectOtherOrganizationNamesForFactSheet != string.Empty)
            {
                <div class="row">
                    <div class="col-xs-12 col-sm-4 col-md-3">
                        <strong>Other @FieldDefinitionEnum.Organization.ToType().GetFieldDefinitionLabelPluralized()</strong>
                    </div>
                    <div class="col-xs-12 col-sm-8 col-md-9">
                        @projectOtherOrganizationNamesForFactSheet
                    </div>
                </div>
            }
            <div class="row">
                <div class="col-xs-12 col-sm-4 col-md-3">
                    <strong>@FieldDefinitionEnum.ProjectPrimaryContact.ToType().GetFieldDefinitionLabel()</strong>
                </div>
                <div class="col-xs-12 col-sm-8 col-md-9">
                    @if (ViewDataTyped.Project.GetPrimaryContact() != null)
                    {
                        <span>
                            @ViewDataTyped.Project.GetPrimaryContact().GetFullNameFirstLast() (@ViewDataTyped.Project.GetPrimaryContact().Email)
                        </span>
                    }
                    else
                    {
                        <span>@ViewUtilities.NoneString</span>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-xs-12 col-sm-4 col-md-3">
                    <strong>@FieldDefinitionEnum.ProjectStage.ToType().GetFieldDefinitionLabel()</strong>
                </div>
                <div class="col-xs-12 col-sm-8 col-md-9">
                    @ViewDataTyped.Project.ProjectStage.ProjectStageDisplayName
                </div>                
            </div>
            <div class="row">
                <div class="col-xs-12 col-sm-4 col-md-3">
                    <strong>Duration</strong>
                </div>
                <div class="col-xs-12 col-sm-8 col-md-9">
                    @ViewDataTyped.Project.GetDuration()
                </div>
            </div>
            
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            <div class="projectTaxonomy">
                @if (MultiTenantHelpers.GetTaxonomyLevel() != TaxonomyLevel.Leaf)
                {
                    @ViewDataTyped.TaxonomyBranchName
                    <span class="glyphicon glyphicon-chevron-right"></span>
                }
                @ViewDataTyped.TaxonomyLeafName
            </div>
        </div>
    </div>
    <div class="row section">
        <div class="col-xs-12 col-sm-12 col-md-7">
            <div class="row">
                <div class="col-xs-12">
                    <div class="projectDescription">@Html.Raw(ViewDataTyped.Project.ProjectDescription.HtmlEncodeWithBreaks())</div>
                </div>
                <div class="col-xs-12" style="margin-top: 10px">
                    <h4>Key Accomplishments</h4>
                    @if (ViewDataTyped.PerformanceMeasureReportedValues.Any() || ViewDataTyped.TechnicalAssistanceRequests.Any())
                    {
                    <ul>
                        @foreach (var performanceMeasureGroup in ViewDataTyped.PerformanceMeasureReportedValues)
                        {
                            if (performanceMeasureGroup.Key.IsSummable)
                            {
                                <li>@performanceMeasureGroup.Key.PerformanceMeasureDisplayName: <strong>@performanceMeasureGroup.Key.MeasurementUnitType.DisplayValue(performanceMeasureGroup.Sum(x => x.GetReportedValue()))</strong></li>
                            }

                            var performanceMeasureSubcategoryOptionsToShowOnFactSheet = performanceMeasureGroup.Key.GetPerformanceMeasureSubcategoryOptions().Where(x => x.ShowOnFactSheet).ToList();
                            if (performanceMeasureSubcategoryOptionsToShowOnFactSheet.Any())
                            {
                                foreach (var subcategoryOption in performanceMeasureSubcategoryOptionsToShowOnFactSheet)
                                {
                                    var performanceMeasureReportedValues = performanceMeasureGroup.Where(x => x.PerformanceMeasureActualSubcategoryOptions.Select(y => y.PerformanceMeasureSubcategoryOption).Contains(subcategoryOption)).ToList();

                                    if (performanceMeasureReportedValues.Any())
                                    {
                                        <li>
                                            @performanceMeasureGroup.Key.PerformanceMeasureDisplayName (@subcategoryOption.PerformanceMeasureSubcategoryOptionName):
                                            <strong>
                                                @performanceMeasureGroup.Key.MeasurementUnitType.DisplayValue(performanceMeasureReportedValues.Sum(x => x.GetReportedValue()))
                                            </strong>
                                        </li>
                                    }
                                }
                            }
                        }
                        @if (ViewDataTyped.TechnicalAssistanceRequests.GetHoursProvidedTotal() > 0)
                         {
                             <li>Engineering & Technical Assistance Hours Requested: <strong>@ViewDataTyped.TechnicalAssistanceRequests.GetHoursRequestedTotal()</strong></li>
                             <li>Engineering & Technical Assistance Hours Allocated: <strong>@ViewDataTyped.TechnicalAssistanceRequests.GetHoursAllocatedTotal()</strong></li>
                             <li>Engineering & Technical Assistance Hours Provided: <strong>@ViewDataTyped.TechnicalAssistanceRequests.GetHoursProvidedTotal()</strong></li>
                             <li>Engineering & Technical Assistance Value: <strong>@ViewDataTyped.TechnicalAssistanceRequests.GetDollarValueProvidedTotal(@ViewDataTyped.TechnicalAssistanceParameters).ToStringCurrency()</strong></li>
                         }
                    </ul>
                    }
                    else
                    {
                        <div class="systemText">Accomplishments to be provided upon completion of @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()</div>
                    }
                </div>
                @foreach (var classificationSystem in MultiTenantHelpers.GetClassificationSystems())
                {
                    <div class="col-xs-12">
                        <h4>@ClassificationSystemModelExtensions.GetClassificationSystemNamePluralized(classificationSystem)</h4>
                        @if (ViewDataTyped.Classifications.Any(x => x.ClassificationSystem == classificationSystem))
                        {
                            <ul>
                                @foreach (var classification in ViewDataTyped.Classifications.Where(x => x.ClassificationSystem == classificationSystem))
                                {

                                    <li style="padding-right: 50px">@classification.GetDisplayName()</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <div class="systemText">No @ClassificationSystemModelExtensions.GetClassificationSystemNamePluralized(classificationSystem) provided</div>
                        }
                    </div>
                }
            </div>
        </div>

        <div class="col-md-5">
            @if (ViewDataTyped.KeyPhoto != null)
            {
                <div class="keyPhoto">
                    <img class="img-responsive" src="@ViewDataTyped.KeyPhoto.GetPhotoUrlScaledForPrint()" alt="@ViewDataTyped.KeyPhoto.GetCaptionOnFullView()" />
                    <span class="captionText">@ViewDataTyped.KeyPhoto.Caption</span>
                </div>
            }
            else
            {
                <div class="text-center">
                    <p class="systemText">No Key Photo provided</p>
                </div>
            }
        </div>
    </div>
    <div class="row section">
        <div class="col-sm-12 col-md-6">
            <div style="margin-left: auto; margin-right: auto;">
                <h4>Location</h4>
                <div id="@ViewDataTyped.ProjectLocationSummaryMapInitJson.MapDivID" class="locationPanel"></div>
                <script type="text/javascript">
                    jQuery(document).ready(function()
                    {
                        var projectLocationSummaryMapInitJson = @Html.Raw(JObject.FromObject(ViewDataTyped.ProjectLocationSummaryMapInitJson).ToString(Formatting.None));
                        var firmaMap = new ProjectFirmaMaps.ProjectLocationSummary(projectLocationSummaryMapInitJson);
                    });
                </script>
            </div>
        </div>
        <div class="col-sm-12 col-md-6">
            <div style="margin-left: auto; margin-right: auto; page-break-inside: avoid">
                <h4>Expenditures</h4>
                <div class="chartPanel">
                    @if (ViewDataTyped.ExpenditureGooglePieChartSlices.Any())
                    {
                        <div class="text-center">
                            <strong>Expenditures by @FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel() to Date: @ViewDataTyped.Project.ProjectFundingSourceExpenditures.Sum(x => x.ExpenditureAmount).ToStringCurrency()</strong>
                        </div>
                        <div id="@ViewDataTyped.GoogleChartJson.ChartContainerID" class="googleChart" style="height: @(ViewDataTyped.CalculatedChartHeight)px;"></div>
                        <div class="captionText">
                            <div>
                                @foreach (var googlePieChartSlice in ViewDataTyped.ExpenditureGooglePieChartSlices.OrderBy(x => x.SortOrder))
                                {
                                    <div class="chartLegendColorBox" style="display:inline-block; border: solid 6px @(googlePieChartSlice.Color);"></div>
                                    <div style="display: inline-block;">
                                        @(googlePieChartSlice.Label): @googlePieChartSlice.Value.ToString("C0")
                                    </div>
                                    <br />
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-center">
                            <p class="systemText">No expenditures provided</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="row section" style="page-break-before: always">
        <div class="col-xs-12">
            <h4>Photos</h4>
        </div>
        @if (ViewDataTyped.ProjectImagesExceptKeyPhotoGroupedByTiming.Any())
        {
            foreach (var projectImagesGroupedByTiming in ViewDataTyped.ProjectImagesExceptKeyPhotoGroupedByTiming)
            {
                <div class="col-xs-12">
                    <strong>@projectImagesGroupedByTiming.Key.ProjectImageTimingDisplayName</strong>
                </div>
                <div class="col-xs-12" style="margin: 0 15px;">
                    @foreach (var projectImageBatch in projectImagesGroupedByTiming.OrderBy(x => x.FileResource.GetOrientation()).Take(ViewDataTyped.ProjectImagesPerTimingGroup).Batch(2))
                    {
                        <div class="row">
                            @foreach (var projectImage in projectImageBatch)
                            {
                                <div class="col-sm-12 col-md-6">
                                    <img class="img-responsive" src="@projectImage.GetPhotoUrlScaledForPrint()" alt="@projectImage.GetCaptionOnFullView()" />
                                    <div class="captionText">@projectImage.Caption</div>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        }
        else
        {
            <div class="col-xs-12">
                <p class="systemText">No additional photos provided</p>
            </div>
        }
    </div>
    <div class="row section">
        <div class="col-md-12">
            @{ ViewPageContent.RenderPartialView(Html, ViewDataTyped.CustomFactSheetPageTextViewData); }
        </div>
    </div>
    <div class="pull-right onlyOnPrint"><hr />@FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel() Fact Sheet Data as of @DateTime.Today.ToStringDate()</div>
</div>
