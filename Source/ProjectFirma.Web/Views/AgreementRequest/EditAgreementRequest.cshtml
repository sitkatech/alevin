@*-----------------------------------------------------------------------
    <copyright file="EditNote.cshtml" company="Tahoe Regional Planning Agency and Sitka Technology Group">
    Copyright (c) Tahoe Regional Planning Agency and Sitka Technology Group. All rights reserved.
    <author>Sitka Technology Group</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using System.Web.Mvc.Html
@using LtInfo.Common.HtmlHelperExtensions
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using ProjectFirma.Web.Common
@using ProjectFirma.Web.Models
@using ProjectFirma.Web.Views.Shared
@using ProjectFirma.Web.Views.Shared.ProjectTimeline
@using ProjectFirmaModels.Models
@inherits ProjectFirma.Web.Views.AgreementRequest.EditAgreementRequest


<style>

    form .form-group {
        margin-top: 10px;
        margin-bottom: 10px;
    }
</style>

<div class="validationError">
    @Html.ValidationSummary()
</div>

@{ ViewPageContent.RenderPartialView(Html, ViewDataTyped.ProjectStatusFirmaPage); }
@using (Html.BeginForm())
{
    <div class="row">
        <div class="col-xs-12">
            <div class="form-horizontal">
                <div class="form-group" id="isModificationUpdateSection">
                    <div class="col-sm-4 control-label">
                        @Html.LabelWithSugarFor(x => x.IsModification)
                    </div>
                    <div class="col-sm-8">
                        <div class="col-xs-12 col-sm-9">
                            <div class="radio-inline">
                                <label>
                                    @Html.RadioButtonFor(m => m.IsModification, true) Yes
                                </label>
                            </div>
                            <div class="radio-inline">
                                <label>
                                    @Html.RadioButtonFor(m => m.IsModification, false) No
                                </label>
                            </div>
                        </div>
                        @Html.ValidationMessageFor(m => m.IsModification)
                    </div>
                </div>

                <div class="form-group" id="agreementIDEditorDiv">
                    <div class="col-sm-4 control-label">
                        @Html.LabelWithSugarFor(m => m.AgreementID, true)
                    </div>
                    <div class="col-sm-8">
                        @Html.DropDownListFor(m => m.AgreementID, ViewDataTyped.Agreements, new { @class = "form-control selectpicker agreement-class" })
                        @Html.ValidationMessageFor(m => m.AgreementID)
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-sm-4 control-label">
                        @Html.LabelWithSugarFor(m => m.ContractTypeID)
                    </div>
                    <div class="col-sm-8">
                        @Html.DropDownListFor(m => m.ContractTypeID, ViewDataTyped.ContractTypes, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.ContractTypeID)
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-sm-4 control-label">
                        @Html.LabelWithSugarFor(m => m.AgreementRequestStatusID)
                    </div>
                    <div class="col-sm-8">
                        @Html.DropDownListFor(m => m.AgreementRequestStatusID, ViewDataTyped.AgreementRequestStatuses, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.AgreementRequestStatusID)
                    </div>
                </div>


                <div class="form-group">
                    <div class="col-sm-4 control-label">@Html.LabelWithSugarFor(m => m.DescriptionOfNeed)</div>
                    <div class="col-sm-8">
                        @Html.TextAreaWithMaxLengthFor(m => m.DescriptionOfNeed, new TextAreaForExtensions.TextAreaDimensions(null, 3), null, new List<string> { "form-control" })
                        @Html.ValidationMessageFor(m => m.DescriptionOfNeed)
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-sm-4 control-label">
                        @Html.LabelWithSugarFor(m => m.ReclamationAgreementRequestFundingPriorityID)
                    </div>
                    <div class="col-sm-8">
                        @Html.DropDownListFor(m => m.ReclamationAgreementRequestFundingPriorityID, ViewDataTyped.FundingPriorities, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.ReclamationAgreementRequestFundingPriorityID)
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-sm-4 control-label">
                        @Html.LabelWithSugarFor(m => m.RecipientOrganizationID)
                    </div>
                    <div class="col-sm-8">
                        @Html.DropDownListFor(m => m.RecipientOrganizationID, ViewDataTyped.Organizations, new { @class = "form-control selectpicker recipient-organization-class", @data_container = ".modal-content" })
                        @Html.ValidationMessageFor(m => m.RecipientOrganizationID)
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-sm-4 control-label">
                        @Html.LabelWithSugarFor(m => m.TechnicalRepresentativePersonID)
                    </div>
                    <div class="col-sm-8">
                        @Html.DropDownListFor(m => m.TechnicalRepresentativePersonID, ViewDataTyped.People, new { @class = "form-control selectpicker technical-representative-class", @data_container = ".modal-content" })
                        @Html.ValidationMessageFor(m => m.TechnicalRepresentativePersonID)
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-sm-4 control-label">
                        @Html.LabelWithSugarFor(x => x.TargetAwardDate)
                    </div>
                    <div class="col-sm-8">
                        @Html.EditorFor(m => m.TargetAwardDate, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.TargetAwardDate)
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-sm-4 control-label">
                        @Html.LabelWithSugarFor(x => x.Palt)
                    </div>
                    <div class="col-sm-8">
                        @Html.EditorFor(m => m.Palt, new { @class = "form-control"})
                        @Html.ValidationMessageFor(m => m.Palt)
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-sm-4 control-label">
                        @Html.LabelWithSugarFor(x => x.TargetSubmittalDate)
                    </div>
                    <div class="col-sm-8">
                        @Html.EditorFor(m => m.TargetSubmittalDate, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.TargetSubmittalDate)
                    </div>
                </div>





            </div>
        </div>
    </div>

}

    <script type="text/javascript">
    jQuery(document).ready(function() {
        var agreementRequestJsons = @Html.Raw(JObject.FromObject(ViewDataTyped.AgreementJsonList.AgreementJsons).ToString(Formatting.None));
        @*var projectStatusInput = jQuery("#@Html.IdFor(m => m.ProjectStatusID)");
        var projectStatusInputElement = document.getElementById("@Html.IdFor(m => m.ProjectStatusID)");*@
        jQuery(".selectpicker").selectpicker();

        jQuery("#@Html.IdFor(m => m.Palt)").prop("min", "1");
        jQuery("#@Html.IdFor(m => m.Palt)").prop("max", "365");

        function adjustTargetSubmittalDateIfNeeded(){
            var palt = jQuery("#@Html.IdFor(m => m.Palt)");
            if (palt.val() != "" && palt.val() != null) {
                var awardDate = jQuery("#@Html.IdFor(m => m.TargetAwardDate)");
                if (awardDate.val() != "" && awardDate.val() != null) {
                    var date = awardDate.val();
                    var daysToSubtract = parseInt(palt.val());
                    var result = new Date(date);
                    result.setDate(result.getDate() - daysToSubtract);
                    var formattedDate = result.toLocaleDateString("en-US");
                    jQuery("#@Html.IdFor(m => m.TargetSubmittalDate)").val(formattedDate);
                    formatSubmittalDate();
                }
            }
        }

        function formatAwardDate() {
            var value = jQuery("#@Html.IdFor(m => m.TargetAwardDate)").val();
            if (value != "" && value != null) {
                var result = new Date(value);
                var formattedDate = result.toLocaleDateString("en-US");
                jQuery("#@Html.IdFor(m => m.TargetAwardDate)").val(formattedDate);
            }
        }

        function formatSubmittalDate() {
            var value = jQuery("#@Html.IdFor(m => m.TargetSubmittalDate)").val();
            if (value != "" && value != null) {
                var result = new Date(value);
                var formattedDate = result.toLocaleDateString("en-US");
                jQuery("#@Html.IdFor(m => m.TargetSubmittalDate)").val(formattedDate);
            }
        }

        formatAwardDate();
        formatSubmittalDate();

        jQuery("#@Html.IdFor(m => m.Palt)").change(function() {
            adjustTargetSubmittalDateIfNeeded();
        });

        jQuery("#@Html.IdFor(m => m.TargetAwardDate)").change(function() {
            adjustTargetSubmittalDateIfNeeded();
            formatAwardDate();
        });

        jQuery("#@Html.IdFor(m => m.TargetSubmittalDate)").change(function() {
            formatSubmittalDate();
        });

       

        jQuery('input[type=radio][name=@Html.NameFor(m => m.IsModification)]').change(function () {
            var value = false;
            if (this.value == 'True') {
                value = true;
            }
            if (value) {
                jQuery('#agreementIDEditorDiv').show();
            } else {
                jQuery('#agreementIDEditorDiv').hide();
                jQuery("#@Html.IdFor(m => m.AgreementID)").val("");
                jQuery("select[name=@Html.NameFor(m => m.AgreementID)] option[value='']").text();
            }

        });

        jQuery("#@Html.IdFor(m => m.AgreementID)").change(function () {
            var selectedAgreementID = jQuery(this).val();
            var recipientOrganization = jQuery("#@Html.IdFor(m => m.RecipientOrganizationID)");
            var technicalRepresentative = jQuery("#@Html.IdFor(m => m.TechnicalRepresentativePersonID)");
            if (selectedAgreementID != "") {
                var agreementOrganization = agreementRequestJsons[selectedAgreementID].OrganizationID;
                if (agreementOrganization != "" && agreementOrganization != null)
                {
                    var orgtext = jQuery("select[name=@Html.NameFor(m => m.RecipientOrganizationID)] option[value='" + agreementOrganization + "']").text();
                    jQuery('.recipient-organization-class .filter-option').text(orgtext);
                    jQuery('.recipient-organization-class .filter-option').css("color", "#333");
                    recipientOrganization.val(agreementOrganization);
                }

                var agreementTechnicalRepresentative = agreementRequestJsons[selectedAgreementID].TechnicalRepresentativeID;
                console.log(agreementTechnicalRepresentative);
                if (agreementTechnicalRepresentative != "" && agreementTechnicalRepresentative != null)
                {
                    var repText = jQuery("select[name=@Html.NameFor(m => m.TechnicalRepresentativePersonID)] option[value='" + agreementTechnicalRepresentative + "']").text();
                    if (repText != null && repText != "") {
                        jQuery('.technical-representative-class .filter-option').text(repText);
                        jQuery('.technical-representative-class .filter-option').css("color", "#333");
                        technicalRepresentative.val(agreementTechnicalRepresentative);
                    }
                }
            }
        });

        var radio = jQuery('input[type=radio][name=@Html.NameFor(m => m.IsModification)]');
        var value = false;
        radio.each(function () {
            var textVal = jQuery(this).val();
            if ( textVal== 'True' && jQuery(this).prop('checked')) {
                value = true;
            }
        });
       
        if (value) {
            jQuery('#agreementIDEditorDiv').show();
        } else {
            jQuery('#agreementIDEditorDiv').hide();
        }
    });


    </script>

