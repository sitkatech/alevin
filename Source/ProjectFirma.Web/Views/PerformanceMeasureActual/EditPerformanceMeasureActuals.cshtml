@*-----------------------------------------------------------------------
<copyright file="EditPerformanceMeasureActuals.cshtml" company="Tahoe Regional Planning Agency and Environmental Science Associates">
Copyright (c) Tahoe Regional Planning Agency and Environmental Science Associates. All rights reserved.
<author>Environmental Science Associates</author>
</copyright>

<license>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

Source code is available upon request via <support@sitkatech.com>.
</license>
-----------------------------------------------------------------------*@
@using ProjectFirmaModels.Models
@using Newtonsoft.Json.Linq
@using ProjectFirma.Web.Common
@using ProjectFirma.Web.Models
@inherits ProjectFirma.Web.Views.PerformanceMeasureActual.EditPerformanceMeasureActuals
<script type="text/javascript">
    // <![CDATA[
    angular.module("ProjectFirmaApp").factory("angularModelAndViewData", function()
    {
        return {
            AngularModel: @Html.Raw(JObject.FromObject(Model)),
            AngularViewData: @Html.Raw(JObject.FromObject(ViewDataTyped))
        };
    });
    angular.bootstrap(jQuery("#EditPerformanceMeasureActualsApp"), ["ProjectFirmaApp"]);

    jQuery(".selectpicker").selectpicker("refresh");
    jQuery(".modal").on("hidden.bs.modal",
        function () {
            jQuery(".bootstrap-select.open").removeClass("open");
        });
    // ]]>
</script>

<style>
    .panel-heading a.collapsePanel:after {
        font-style: italic;
        content: "Collapse Section";
        float: right;
    }

    .panel-heading a.collapsePanel.collapsed:after {
        content: "Expand Section";
    }

    .panel-heading a.collapsePanel {
        cursor: pointer;
    }

    .modal {
        overflow: scroll;
    }

    .table>tbody>tr>td {
        border: none;
    }
</style>

<div class="validationError">
    @Html.ValidationSummary()
</div>


<div id="EditPerformanceMeasureActualsApp" ng-controller="PerformanceMeasureActualController">
    @if (Model.ProjectExemptReportingYears != null && Model.ProjectExemptReportingYears.Any())
    {
        <div style="margin-top: 5px">
            <a style="font-weight: bold; cursor: pointer" ng-click="AngularViewData.ShowExemptYears = !AngularViewData.ShowExemptYears">
                <i ng-class="AngularViewData.ShowExemptYears ? 'glyphicon glyphicon-chevron-up' : 'glyphicon glyphicon-chevron-down'" ></i> 
                What if the @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel() has no accomplishments to report?
            </a>
            <div ng-show="AngularViewData.ShowExemptYears">
                Select the years for which there are no accomplishments to report and provide a brief explanation.
                <div>
                    <label ng-repeat="projectExemptYear in AngularModel.ProjectExemptReportingYears" style="padding-right: 10px">
                        <input type="checkbox" ng-model="projectExemptYear.IsExempt"/> <span ng-bind="projectExemptYear.CalendarYearDisplay"></span></label>
                </div>
                @Html.TextAreaFor(x => x.Explanation, new Dictionary<string, object> {{"style", "width:100%"}, {"placeholder", "Explanation here"}, {"ng-model", "AngularModel.Explanation"}, {"class", "form-control"}})
                @Html.ValidationMessageFor(x => x.Explanation)
            </div>
        </div>
        <hr/>
    }
    <div class="form-group">
        <label class="control-label">@MultiTenantHelpers.GetPerformanceMeasureName() to Add:</label>
        <div class="input-group">
            <select ng-model="PerformanceMeasureToAdd"
                    class="selectpicker"
                    data-live-search="true"
                    data-container="body"
                    title="Select a @MultiTenantHelpers.GetPerformanceMeasureName()"
                    data-width="100%">
                <option value="" disabled selected>Select a @MultiTenantHelpers.GetPerformanceMeasureName()</option>
                <option ng-repeat="performanceMeasure in filteredPerformanceMeasures()"
                        value="{{performanceMeasure.PerformanceMeasureID}}"
                        ng-selected="PerformanceMeasureToAdd == performanceMeasure.PerformanceMeasureID"
                        ng-bind="performanceMeasure.DisplayName"
                        data-tokens="{{performanceMeasure.DisplayName}}"></option>
            </select>
            <span class="input-group-btn">
                <button class="btn btn-firma" type="button" ng-click="addRow()">
                    <span class="glyphicon glyphicon-plus"></span> Add
                </button>
            </span>
        </div>
    </div>            
    <div style="max-height: 400px; overflow-y: scroll">
        <div class="panel-group" id="accordion">
            <div ng-repeat="performanceMeasureGroup in groupedPerformanceMeasures() | orderBy:[getPerformanceMeasureName]">
                <div class="panel panelFirma" style="margin: 10px 10px 0;">
                    <div class="panel-heading">
                        <span class="panel-heading-left">
                            <span class="helpicon glyphicon glyphicon-question-sign blue" title="Click to get more info on this @MultiTenantHelpers.GetPerformanceMeasureName()"
                                  ng-mouseover="performanceMeasureTooltip(performanceMeasureGroup)">
                            </span>
                        </span>
                        <span ng-bind="getPerformanceMeasureName(performanceMeasureGroup)"></span>
                        <a data-toggle="collapse" data-target="#collapse{{$index}}" class="collapsePanel"></a>
                    </div>
                    <div id="collapse{{$index}}" class="collapse in">
                        <div class="panel-body" style="padding: 0 30px;">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th></th>
                                        <th>Year</th>
                                        <th ng-show="getPerformanceMeasure(performanceMeasureGroup.PerformanceMeasureID).HasRealSubcategories" ng-repeat="performanceMeasureActualSubcategoryOption in performanceMeasureGroup.PerformanceMeasureActualSubcategoryOptions | orderBy:[getSubcategoryName]">{{getSubcategoryName(performanceMeasureActualSubcategoryOption)}}</th>
                                        <th>Value</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr ng-repeat="performanceMeasureActual in getGroupPerformanceMeasures(performanceMeasureGroup)">
                                        <td style="width: 50px">
                                            <span class="glyphicon glyphicon-trash" title="Remove row" alt="Remove row" ng-click="deleteRow(performanceMeasureActual)" style="cursor: pointer"></span>
                                        </td>
                                        <td style="width: 120px">
                                            <select class="form-control"
                                                    ng-model="performanceMeasureActual.CalendarYear">
                                                <option ng-repeat="calendarYearString in AngularViewData.CalendarYearStrings"
                                                        value="{{calendarYearString.CalendarYear}}"
                                                        ng-selected="calendarYearString.CalendarYear == performanceMeasureActual.CalendarYear">
                                                    {{calendarYearString.CalendarYearDisplay}}
                                                </option>
                                            </select>
                                        </td>
                                        <td ng-show="getPerformanceMeasure(performanceMeasureActual.PerformanceMeasureID).HasRealSubcategories" ng-repeat="performanceMeasureActualSubcategoryOption in performanceMeasureActual.PerformanceMeasureActualSubcategoryOptions | orderBy:[getSubcategoryName]">
                                            <select class="form-control"
                                                    ng-model="performanceMeasureActualSubcategoryOption.PerformanceMeasureSubcategoryOptionID">
                                                <option ng-repeat="performanceMeasureSubcategoryOption in getSubcategoryOptionsForSubcategory(performanceMeasureActualSubcategoryOption.PerformanceMeasureSubcategoryID)"
                                                        value="{{performanceMeasureSubcategoryOption.PerformanceMeasureSubcategoryOptionID}}"
                                                        ng-selected="performanceMeasureActualSubcategoryOption.PerformanceMeasureSubcategoryOptionID == performanceMeasureSubcategoryOption.PerformanceMeasureSubcategoryOptionID">
                                                    {{performanceMeasureSubcategoryOption.PerformanceMeasureSubcategoryOptionName}}
                                                </option>
                                            </select>
                                        </td>
                                        <td style="width: 100px">
                                            <input class="form-control" style="text-align: right"
                                                   ng-model="performanceMeasureActual.ActualValue" ng-number/>
                                        </td>
                                        <td style="vertical-align: middle; padding-left: 0">
                                            {{getMeasurementUnitTypeDisplayName(performanceMeasureActual)}}
                                        </td>
                                    </tr>
                                    <tr>
                                        <td colspan="{{numberOfSubcategoryOptions(performanceMeasureGroup) + 4}}" class="text-right">
                                            <button class="btn btn-xs btn-firma" type="button" ng-click="addPerformanceMeasureToGroup(performanceMeasureGroup)">
                                                <span class="glyphicon glyphicon-plus"></span> Add a Row
                                            </button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @using (Html.BeginForm())
    {        
        <div ng-repeat="performanceMeasureActual in AngularModel.PerformanceMeasureActuals | orderBy:'PerformanceMeasureID'">
            <input type="hidden" name="@Html.NameFor(x => x.PerformanceMeasureActuals[0].PerformanceMeasureReportingPeriodID).ToString().Replace("0", "{{$index}}")" value="{{performanceMeasureActual.PerformanceMeasureReportingPeriodID}}">
            <input type="hidden" name="@Html.NameFor(x => x.PerformanceMeasureActuals[0].ActualValue).ToString().Replace("0", "{{$index}}")" value="{{performanceMeasureActual.ActualValue}}">
            <input type="hidden" name="@Html.NameFor(x => x.PerformanceMeasureActuals[0].CalendarYear).ToString().Replace("0", "{{$index}}")" value="{{performanceMeasureActual.CalendarYear}}">
            <input type="hidden" name="@Html.NameFor(x => x.PerformanceMeasureActuals[0].PerformanceMeasureActualID).ToString().Replace("0", "{{$index}}")" value="{{performanceMeasureActual.PerformanceMeasureActualID}}">
            <input type="hidden" name="@Html.NameFor(x => x.PerformanceMeasureActuals[0].ProjectID).ToString().Replace("0", "{{$index}}")" value="{{performanceMeasureActual.ProjectID}}">
            <input type="hidden" name="@Html.NameFor(x => x.PerformanceMeasureActuals[0].PerformanceMeasureID).ToString().Replace("0", "{{$index}}")" value="{{performanceMeasureActual.PerformanceMeasureID}}">
            <input type="hidden" name="@Html.NameFor(x => x.PerformanceMeasureActuals[0].PerformanceMeasureActualName).ToString().Replace("0", "{{$index}}")" value="{{getPerformanceMeasure(performanceMeasureActual.PerformanceMeasureID).DisplayName}}">


            <div ng-repeat="performanceMeasureActualSubcategoryOption in getSubcategoryOptionsSelected(performanceMeasureActual)">
                <input type="hidden" name="@Html.NameFor(x => x.PerformanceMeasureActuals[0].PerformanceMeasureActualSubcategoryOptions[1].PerformanceMeasureSubcategoryOptionID).ToString().Replace("0", "{{$parent.$index}}").Replace("1", "{{$index}}")" value="{{performanceMeasureActualSubcategoryOption.PerformanceMeasureSubcategoryOptionID}}">
                <input type="hidden" name="@Html.NameFor(x => x.PerformanceMeasureActuals[0].PerformanceMeasureActualSubcategoryOptions[1].PerformanceMeasureSubcategoryID).ToString().Replace("0", "{{$parent.$index}}").Replace("1", "{{$index}}")" value="{{performanceMeasureActualSubcategoryOption.PerformanceMeasureSubcategoryID}}">
                <input type="hidden" name="@Html.NameFor(x => x.PerformanceMeasureActuals[0].PerformanceMeasureActualSubcategoryOptions[1].PerformanceMeasureID).ToString().Replace("0", "{{$parent.$index}}").Replace("1", "{{$index}}")" value="{{performanceMeasureActualSubcategoryOption.PerformanceMeasureID}}">
            </div>
        </div>
        <div ng-repeat="projectExemptYear in AngularModel.ProjectExemptReportingYears">
            <input type="hidden" name="@Html.NameFor(x => x.ProjectExemptReportingYears[0].CalendarYear).ToString().Replace("0", "{{$index}}")" value="{{projectExemptYear.CalendarYear}}" />
            <input type="hidden" name="@Html.NameFor(x => x.ProjectExemptReportingYears[0].ProjectID).ToString().Replace("0", "{{$index}}")" value="{{projectExemptYear.ProjectID}}" />
            <input type="hidden" name="@Html.NameFor(x => x.ProjectExemptReportingYears[0].ProjectExemptReportingYearID).ToString().Replace("0", "{{$index}}")" value="{{projectExemptYear.ProjectExemptReportingYearID}}" />
            <input type="hidden" name="@Html.NameFor(x => x.ProjectExemptReportingYears[0].IsExempt).ToString().Replace("0", "{{$index}}")" value="{{projectExemptYear.IsExempt}}" />
            <input type="hidden" name="@Html.NameFor(x => x.ProjectExemptReportingYears[0].CalendarYearDisplay).ToString().Replace("0", "{{$index}}")" value="{{projectExemptYear.CalendarYearDisplay}}" />
        </div>
        <input type="hidden" name="@Html.NameFor(x => x.Explanation)" value="{{AngularModel.Explanation}}" />
    }
</div>
