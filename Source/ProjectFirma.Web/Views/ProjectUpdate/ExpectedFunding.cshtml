@*-----------------------------------------------------------------------
    <copyright file="ExpectedFunding.cshtml" company="Tahoe Regional Planning Agency and Sitka Technology Group">
    Copyright (c) Tahoe Regional Planning Agency and Sitka Technology Group. All rights reserved.
    <author>Sitka Technology Group</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using ProjectFirma.Web.Common
@using ProjectFirmaModels.Models
@using ProjectFirma.Web.Views.ProjectFunding
@using ProjectFirma.Web.Views.ProjectUpdate
@using LtInfo.Common.ModalDialog
@using Newtonsoft.Json.Linq
@using ProjectFirma.Web.Models
@inherits ExpectedFunding

@section JavascriptAndStylesContent
{
    @if (ViewDataTyped.IsEditable && ViewDataTyped.AreProjectBasicsValid)
    {
        <script src="@Url.Content("~/Views/ProjectUpdate/ExpectedFundingController.js")" type="text/javascript"></script>
        <script type="text/javascript">
            // <![CDATA[
            angular.module("ProjectFirmaApp").factory("angularModelAndViewData",
                function() {
                    return {
                        AngularModel: @Html.Raw(JObject.FromObject(Model.ViewModelForAngular)),
                        AngularViewData: @Html.Raw(JObject.FromObject(ViewDataTyped.ViewDataForAngular))
                    };
                });

            // ]]>
        </script>
    }
}

@if (!ViewDataTyped.AreProjectBasicsValid)
{
    <div class="alert alert-danger">
        @FirmaValidationMessages.UpdateSectionIsDependentUponBasicsSection
    </div>
}


<p>
    Enter the expected funding for your @(FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()). You may enter multiple @(FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabelPluralized()).
    For each @(FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel()), provide the amount of funding that has been secured, and the amount that is targeted but not yet secured. If the amount of @FieldDefinitionEnum.SecuredFunding.ToType().GetFieldDefinitionLabel() or @FieldDefinitionEnum.TargetedFunding.ToType().GetFieldDefinitionLabel() is unknown, you can leave the amounts blank.
</p>

<hr/>

@if (!ViewDataTyped.IsEditable)
{
    ProjectFundingDetail.RenderPartialView(Html, ViewDataTyped.ProjectFundingDetailViewData);
}
else if (ViewDataTyped.AreProjectBasicsValid)
{
    using (Html.BeginForm())
    {
        <div ng-app="ProjectFirmaApp" ng-controller="ExpectedFundingController">
            <div class="form-group">
                <label class="control-label">
                    @Html.Label("Does the " + @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel() + " budget vary by year or is it the same?")
                </label>
                <div class="input-group">
                    <select ng-model="selectedFundingTypeID"
                            class="selectpicker"
                            data-container="body"
                            data-width="100%">
                        <option ng-repeat="fundingType in fundingTypes()"
                                value="{{fundingType.Value}}"
                                ng-selected="selectedFundingTypeID == fundingType.Value"
                                ng-bind="fundingType.Text"
                        ></option>
                    </select>
                    @Html.ValidationMessageFor(m => m.ViewModelForAngular.FundingTypeID)
                </div>
            </div>

        <div class="form-group" ng-if="budgetVariesByYear()">
            <label class="control-label">
                What is your @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()’s @FieldDefinitionEnum.EstimatedTotalCost.ToType().GetFieldDefinitionLabel()? <sup><span class="requiredFieldIcon glyphicon glyphicon-flash" style="color: #800020; font-size: 8px;"></span></sup>
            </label>
            <div class="input-group">
                <input type="text" name="@Html.NameFor(x => x.EstimatedTotalCost)" ng-model="costs.estimatedTotalCost" class="form-control sitkaCurrency" style="text-align: right;" ng-currency/>

                @Html.ValidationMessageFor(m => m.EstimatedTotalCost)
            </div>
        </div>
        <div class="form-group" ng-if="budgetSameEachYear()">
            <label class="control-label">
                What is your @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()’s @FieldDefinitionEnum.EstimatedAnnualOperatingCost.ToType().GetFieldDefinitionLabel()? <sup><span class="requiredFieldIcon glyphicon glyphicon-flash" style="color: #800020; font-size: 8px;"></span></sup>
            </label>
            <div class="input-group">
                <input type="text" name="@Html.NameFor(x => x.EstimatedAnnualOperatingCost)" ng-model="costs.estimatedAnnualOperatingCost" class="form-control sitkaCurrency" style="text-align: right;" ng-currency/>
                @Html.ValidationMessageFor(m => m.EstimatedAnnualOperatingCost)
            </div>
        </div>

        <hr/>
        <div class="form-group">
            <label class="control-label">@FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel() to Add:</label>
            <div class="input-group">
                <select ng-model="FundingSourceIDToAdd"
                        class="selectpicker"
                        data-live-search="true"
                        data-container="body"
                        title="Select a @FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel() to Add"
                        data-width="70%">
                    <option value="null" disabled selected>Select a @FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel() to Add</option>
                    <option ng-repeat="fundingSource in filteredFundingSources()"
                            value="{{fundingSource.FundingSourceID}}"
                            ng-selected="FundingSourceIDToAdd == fundingSource.FundingSourceID"
                            ng-bind="fundingSource.DisplayName"
                            data-tokens="{{fundingSource.DisplayName}} {{fundingSource.OrganizationFullName}}">
                    </option>
                </select>
                <span class="input-group-btn">
                    <button class="btn btn-firma" type="button" ng-click="addRow()">
                        <span class="glyphicon glyphicon-plus"></span> Add
                    </button>
                </span>
            </div>
            <p style="font-size: 12px;">
                @(FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel()) not listed?
                @ModalDialogFormHelper.ModalDialogFormLink("Contact support", ViewDataTyped.RequestFundingSourceUrl, "Request Support", 800, "Submit Request", "Cancel", new List<string>(), null, null)
            </p>
        </div>
        <div style="overflow-x: auto" class="form-inline">
            <table class="table" style="margin-top: 20px; overflow: scroll" ng-show="AngularModel.ProjectFundingSourceBudgetUpdateSimples.length > 0">
                <tr>
                    <th></th>
                    <th>@Html.LabelWithSugarFor(FieldDefinitionEnum.FundingSource.ToType())</th>
                    <th style="text-align: right">@Html.LabelWithSugarFor(FieldDefinitionEnum.SecuredFunding.ToType())</th>
                    <th style="text-align: right">@Html.LabelWithSugarFor(FieldDefinitionEnum.TargetedFunding.ToType())</th>
                    <th style="text-align: right">Total</th>
                </tr>
                <tr ng-repeat="projectFundingSourceBudgetUpdateSimple in AngularModel.ProjectFundingSourceBudgetUpdateSimples | orderBy:[getFundingSourceName]">
                    <td>
                        <span class="glyphicon glyphicon-trash blue" title="Remove row" alt="Remove row" ng-click="deleteRow(projectFundingSourceBudgetUpdateSimple)" style="cursor: pointer"></span>
                    </td>
                    <td ng-bind="getFundingSourceName(projectFundingSourceBudgetUpdateSimple)"></td>
                    <td style="text-align: right">
                        <input type="text" style="text-align: right" ng-model="projectFundingSourceBudgetUpdateSimple.SecuredAmount" class="sitkaCurrency form-control " ng-currency/>
                    </td>
                    <td style="text-align: right">
                        <input type="text" style="text-align: right" ng-model="projectFundingSourceBudgetUpdateSimple.TargetedAmount" class="sitkaCurrency form-control" ng-currency/>
                    </td>
                    <th style="text-align: right">
                        {{ getRowTotal(projectFundingSourceBudgetUpdateSimple) | currency:"$"}}
                    </th>
                </tr>
                <tr>
                    <th colspan="2">Total</th>
                    <th style="text-align: right">
                        {{ getSecuredTotal() | currency:"$"}}
                    </th>
                    <th style="text-align: right">
                        {{ getTargetedTotal() | currency:"$"}}
                    </th>
                    <th style="text-align: right">
                        {{getTotal() | currency:"$"}}
                    </th>
                </tr>
            </table>
        </div>

        <hr/>

        <div style="margin: 10px 0px; padding: 5px 10px;">
            <p>
                <label class="control-label">Summary of Total @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel() Costs and Funding:</label>
            </p>
            @* If the Budget Changes per year *@
            <div ng-if="budgetVariesByYear()">
                <div class="row">
                    <div class="col-sm-4">@Html.LabelWithSugarFor(FieldDefinitionEnum.EstimatedTotalCost.ToType()):</div>
                    <div class="col-sm-3 text-right">
                        <span>
                            {{ costs.estimatedTotalCost | currency:"$"}}
                        </span>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-4">@Html.LabelWithSugarFor(FieldDefinitionEnum.SecuredFunding.ToType()):</div>
                    <div class="col-sm-3 text-right">
                        <span>
                            {{ getSecuredTotal() | currency:"$" }}
                        </span>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-4">@Html.LabelWithSugarFor(FieldDefinitionEnum.TargetedFunding.ToType()):</div>
                    <div class="col-sm-3 text-right">
                        <span>
                            {{ getTargetedTotal() | currency:"$" }}
                        </span>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-4">@Html.LabelWithSugarFor(FieldDefinitionEnum.NoFundingSourceIdentified.ToType()):</div>
                    <div class="col-sm-3 text-right">
                        <span>
                            {{ (costs.estimatedTotalCost - getSecuredTotal() - getTargetedTotal()) | currency:"$"}}
                        </span>
                    </div>
                </div>
            </div>
            @* If the Budget Same Each year *@
            <div ng-if="budgetSameEachYear()">
                <div class="row">
                    <div class="col-sm-4">@Html.LabelWithSugarFor(FieldDefinitionEnum.EstimatedAnnualOperatingCost.ToType()):</div>
                    <div class="col-sm-3 text-right">
                        <span>
                            {{ costs.estimatedAnnualOperatingCost | currency:"$"}}
                        </span>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-4">@Html.LabelWithSugarFor(FieldDefinitionEnum.SecuredFunding.ToType()):</div>
                    <div class="col-sm-3 text-right">
                        <span>
                            {{ getSecuredTotal() | currency:"$" }} per year
                        </span>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-4">@Html.LabelWithSugarFor(FieldDefinitionEnum.TargetedFunding.ToType()):</div>
                    <div class="col-sm-3 text-right">
                        <span>
                            {{ getTargetedTotal() | currency:"$" }} per year
                        </span>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-4">@Html.LabelWithSugarFor(FieldDefinitionEnum.NoFundingSourceIdentified.ToType()):</div>
                    <div class="col-sm-3 text-right">
                        <span>
                            {{ (costs.estimatedAnnualOperatingCost - getSecuredTotal() - getTargetedTotal()) | currency:"$"}} per year
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <input type="hidden" name="@Html.NameFor(x => x.ViewModelForAngular.FundingTypeID)" value="{{selectedFundingTypeID}}"/>
        <div ng-repeat="projectFundingSourceBudgetUpdateSimple in AngularModel.ProjectFundingSourceBudgetUpdateSimples | orderBy:[getFundingSourceName]">
            <input type="hidden" name="@Html.NameFor(x => x.ViewModelForAngular.ProjectFundingSourceBudgetUpdateSimples[0].ProjectUpdateBatchID).ToString().Replace("0", "{{$index}}")" value="{{projectFundingSourceBudgetUpdateSimple.ProjectUpdateBatchID}}"/>
            <input type="hidden" name="@Html.NameFor(x => x.ViewModelForAngular.ProjectFundingSourceBudgetUpdateSimples[0].FundingSourceID).ToString().Replace("0", "{{$index}}")" value="{{projectFundingSourceBudgetUpdateSimple.FundingSourceID}}"/>
            <input type="hidden" name="@Html.NameFor(x => x.ViewModelForAngular.ProjectFundingSourceBudgetUpdateSimples[0].SecuredAmount).ToString().Replace("0", "{{$index}}")" value="{{projectFundingSourceBudgetUpdateSimple.SecuredAmount}}"/>
            <input type="hidden" name="@Html.NameFor(x => x.ViewModelForAngular.ProjectFundingSourceBudgetUpdateSimples[0].TargetedAmount).ToString().Replace("0", "{{$index}}")" value="{{projectFundingSourceBudgetUpdateSimple.TargetedAmount}}"/>
        </div>

        @if (ViewDataTyped.ShowApproveAndReturnButton)
        {
            <hr/>
            <div class="row form-group">
                <div class="col-md-3">@Html.LabelWithSugarFor(x => x.Comments)</div>
                <div class="col-md-9">
                    @Html.TextAreaFor(x => x.Comments, new Dictionary<string, object> {{"style", "width: 100%"}, {"class", "form-control"}})
                </div>
            </div>
        }
        <hr/>
        @{ SectionComments.RenderPartialView(Html, ViewDataTyped.SectionCommentsViewData); }
        <table class="summaryLayout" style="width: 100%">
            <tr>
                <td>
                    @ModalDialogFormHelper.ModalDialogFormLink("revert-button", "Revert Current Page", ViewDataTyped.RefreshUrl, "Refresh this section", 500, "Continue", "Continue", "Cancel", new List<string> {"btn btn-xs btn-firma"}, null, null, null, "Undo all changes on this page")
                    @if (ViewDataTyped.ProjectUpdateStatus.IsExpectedFundingUpdated)
                    {
                        @ModalDialogFormHelper.ModalDialogFormLink("diff-link-id", "Show Changes", ViewDataTyped.DiffUrl, string.Format("Changes to {0} Expenditures", FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()), 800, "hidden-save-button", string.Empty, "Close", new List<string> {"btn btn-xs btn-firma"}, null, null, null)
                    }
                </td>
                <td style="text-align: right; white-space: nowrap">
                    <button type="submit" class="btn btn-xs btn-firma" title="Save changes made on this page" value="false" name="@Html.NameFor(x => x.AutoAdvance)" ng-disabled="pmForm.$invalid">Save</button>
                    <button type="submit" class="btn btn-xs btn-firma" title="Save changes and continue to next page" value="true" name="@Html.NameFor(x => x.AutoAdvance)" ng-disabled="pmForm.$invalid">Save &amp; Continue<span class='glyphicon glyphicon-chevron-right'></span></button>
                </td>
            </tr>
        </table>

        </div>
    }
}


<script type="text/javascript">
    //<![CDATA[
    jQuery(document).ready(function() { HookupCheckIfFormIsDirty(undefined, ".submitProject"); });
    // ]]>
</script>