@using System.ComponentModel
@using LtInfo.Common
@using LtInfo.Common.BootstrapWrappers
@using ProjectFirma.Web.Common
@using ProjectFirma.Web.Models
@using ProjectFirmaModels.Models

@model ProjectCustomAttributes

@functions 
{
    private string MakeAttributeNameForProjectCustomAttributeValues(int indexOfAttribute)
    {
        return Html.NameFor(m => m.Attributes[0].ProjectCustomAttributeValues).ToString().Replace("0", indexOfAttribute.ToString());
    }

    private string MakeAttributeValueForProjectCustomAttributeValues(ProjectCustomAttributeSimple attributeSimple)
    {
        return attributeSimple != null && attributeSimple.ProjectCustomAttributeValues != null ? attributeSimple.ProjectCustomAttributeValues[0] : null;
    }

    private string GetCheckedValueForBooleanCheckbox(ProjectCustomAttributeSimple attributeSimple)
    {
        // If true, Checked
        if (attributeSimple != null && attributeSimple.ProjectCustomAttributeValues != null && attributeSimple.ProjectCustomAttributeValues[0].ToLower() == "true")
        {
            return "checked=\"checked\"";
        }

        // Otherwise, unchecked
        return string.Empty;
    }

}

@{
    var projectCustomAttributeTypes = ViewData.ContainsKey("ProjectCustomAttributes") && ViewData["ProjectCustomAttributes"] is IEnumerable<ProjectCustomAttributeType>
        ? ((IEnumerable<ProjectCustomAttributeType>)ViewData["ProjectCustomAttributes"]).ToList()
        : new List<ProjectCustomAttributeType>();
    var colLeft = ViewData.ContainsKey("colLeft") && ViewData["colLeft"] is int ? ViewData["colLeft"] : 4;
    var colRight = ViewData.ContainsKey("colRight") && ViewData["colRight"] is int ? ViewData["colRight"] : 8;
}

@for (var indexOfAttribute = 0; indexOfAttribute < projectCustomAttributeTypes.Count; indexOfAttribute++)
{
    var attribute = projectCustomAttributeTypes[indexOfAttribute];
    var attributeSimple = Model != null && Model.Attributes != null ? Model.Attributes.SingleOrDefault(m => m.ProjectCustomAttributeTypeID == attribute.ProjectCustomAttributeTypeID) : null;
    var indexOfAttributeSimple = Model != null && Model.Attributes != null ? Model.Attributes.IndexOf(attributeSimple) : (int?) null;
    <div class="form-group">
        <label class="col-sm-@colLeft control-label">
            @if (!string.IsNullOrWhiteSpace(attribute.ProjectCustomAttributeTypeDescription))
            {
                @LabelWithSugarForExtensions.GenerateHelpIconImgTag(attribute.ProjectCustomAttributeTypeName, attribute.ProjectCustomAttributeTypeDescription.ToHTMLFormattedString(), attribute.GetDescriptionUrl(), 300, LabelWithSugarForExtensions.DisplayStyle.HelpIconOnly).ToHTMLFormattedString()
            }
            @(attribute != null ? attribute.ProjectCustomAttributeTypeName : null)
            @if (attribute != null && attribute.IsRequired)
            {
                <span>
                    <sup>@Html.Raw(BootstrapHtmlHelpers.RequiredIcon)</sup>
                </span>
            }
        </label>
        <div class="col-sm-@colRight">
            <input type="hidden" name="@(Html.NameFor(m => m.Attributes[0].ProjectCustomAttributeTypeID).ToString().Replace("0", indexOfAttribute.ToString()))"
                                 value="@(attribute != null ? attribute.ProjectCustomAttributeTypeID : (int?) null)" />
            @if (attribute != null)
            {
                switch (attribute.ProjectCustomAttributeDataType.ToEnum)
                {
                    case ProjectCustomAttributeDataTypeEnum.DateTime:
                        <input type="text" class="form-control sitkaDatePicker" style="width: auto;"
                               name="@(MakeAttributeNameForProjectCustomAttributeValues(indexOfAttribute))"
                               value="@(MakeAttributeValueForProjectCustomAttributeValues(attributeSimple))" />
                        if (indexOfAttributeSimple != null && indexOfAttributeSimple >= 0 && Model.Attributes[indexOfAttributeSimple.Value].ProjectCustomAttributeValues != null)
                        {
                            for (var valueIndex = 0; valueIndex < Model.Attributes[indexOfAttributeSimple.Value].ProjectCustomAttributeValues.Count; valueIndex++)
                            {
                                @Html.ValidationMessageFor(m => m.Attributes[indexOfAttributeSimple.Value].ProjectCustomAttributeValues[valueIndex])
                            }
                        }
                        break;

                    case ProjectCustomAttributeDataTypeEnum.Integer:
                    case ProjectCustomAttributeDataTypeEnum.Decimal:
                        if (attribute.MeasurementUnitType != null && !string.IsNullOrWhiteSpace(attribute.MeasurementUnitType.MeasurementUnitTypeDisplayName))
                        {
                            <div class="input-group col-xs-5 col-sm-8 col-md-6 col-lg-5">
                                <input class="form-control" type="number" aria-describedby="attributeUnit" style="z-index: 1;"
                                       name="@(MakeAttributeNameForProjectCustomAttributeValues(indexOfAttribute))"
                                       value="@(MakeAttributeValueForProjectCustomAttributeValues(attributeSimple))" />
                                <span class="input-group-addon" id="attributeUnit">@attribute.MeasurementUnitType.MeasurementUnitTypeDisplayName</span>
                            </div>
                        }
                        else
                        {
                            <input class="form-control" type="number" aria-describedby="attributeUnit" style="width: auto;"
                                   name="@(MakeAttributeNameForProjectCustomAttributeValues(indexOfAttribute))"
                                   value="@(MakeAttributeValueForProjectCustomAttributeValues(attributeSimple))" />
                        }
                        if (indexOfAttributeSimple != null && indexOfAttributeSimple >= 0 && Model.Attributes[indexOfAttributeSimple.Value].ProjectCustomAttributeValues != null)
                        {
                            for (var valueIndex = 0; valueIndex < Model.Attributes[indexOfAttributeSimple.Value].ProjectCustomAttributeValues.Count; valueIndex++)
                            {
                                @Html.ValidationMessageFor(m => m.Attributes[indexOfAttributeSimple.Value].ProjectCustomAttributeValues[valueIndex])
                            }
                        }
                        break;

                    case ProjectCustomAttributeDataTypeEnum.PickFromList:
                        <select class="form-control" style="width: auto;"
                                name="@(MakeAttributeNameForProjectCustomAttributeValues(indexOfAttribute))">
                            <option value=""></option>
                            @foreach (var option in attribute.GetOptionsSchemaAsListOfString())
                            {
                                <option value="@option"
                                        selected="@(attributeSimple != null && attributeSimple.ProjectCustomAttributeValues != null && attributeSimple.ProjectCustomAttributeValues[0] == option)">
                                    @option
                                </option>
                            }
                        </select>
                        if (indexOfAttributeSimple != null && indexOfAttributeSimple >= 0 && Model.Attributes[indexOfAttributeSimple.Value].ProjectCustomAttributeValues != null)
                        {
                            for (var valueIndex = 0; valueIndex < Model.Attributes[indexOfAttributeSimple.Value].ProjectCustomAttributeValues.Count; valueIndex++)
                            {
                                @Html.ValidationMessageFor(m => m.Attributes[indexOfAttributeSimple.Value].ProjectCustomAttributeValues[valueIndex])
                            }
                        }
                        break;

                    case ProjectCustomAttributeDataTypeEnum.MultiSelect:
                        for (var j = 0; j < attribute.GetOptionsSchemaAsListOfString().Count; j++)
                        {
                            var option = attribute.GetOptionsSchemaAsListOfString()[j];
                            <input type="checkbox"
                                   id="@string.Format("multiselect_{0}", option)"
                                   value="@option"
                                   name="@(MakeAttributeNameForProjectCustomAttributeValues(indexOfAttribute))[]"
                                   checked="@(attributeSimple != null && attributeSimple.ProjectCustomAttributeValues != null && attributeSimple.ProjectCustomAttributeValues.Any(value => value == option))">
                            <label for="@string.Format("multiselect_{0}", option)">@option</label>
                            <br />
                        }
                        if (indexOfAttributeSimple != null && indexOfAttributeSimple >= 0 && Model.Attributes[indexOfAttributeSimple.Value].ProjectCustomAttributeValues != null)
                        {
                            for (var valueIndex = 0; valueIndex < Model.Attributes[indexOfAttributeSimple.Value].ProjectCustomAttributeValues.Count; valueIndex++)
                            {
                                @Html.ValidationMessageFor(m => m.Attributes[indexOfAttributeSimple.Value].ProjectCustomAttributeValues[valueIndex])
                            }
                        }
                        break;

                    case ProjectCustomAttributeDataTypeEnum.String:
                        <input class="form-control" type="text" style="width: auto;"
                               name="@(MakeAttributeNameForProjectCustomAttributeValues(indexOfAttribute))"
                               value="@(MakeAttributeValueForProjectCustomAttributeValues(attributeSimple))" />
                        if (indexOfAttributeSimple != null && indexOfAttributeSimple >= 0 && Model.Attributes[indexOfAttributeSimple.Value].ProjectCustomAttributeValues != null)
                        {
                            for (var valueIndex = 0; valueIndex < Model.Attributes[indexOfAttributeSimple.Value].ProjectCustomAttributeValues.Count; valueIndex++)
                            {
                                @Html.ValidationMessageFor(m => m.Attributes[indexOfAttributeSimple.Value].ProjectCustomAttributeValues[valueIndex])
                            }
                        }
                        break;


                    case ProjectCustomAttributeDataTypeEnum.Boolean:
                        <input type="checkbox"
                               id="@string.Format("checkbox_{0}", MakeAttributeNameForProjectCustomAttributeValues(indexOfAttribute))"
                               @*Always true if submitted. (If unchecked, won't be submitted).*@
                               value="True"
                               name="@(MakeAttributeNameForProjectCustomAttributeValues(indexOfAttribute))"
                               @GetCheckedValueForBooleanCheckbox(attributeSimple)>

                        break;

                    default:
                        throw new InvalidEnumArgumentException(string.Format("Enum value {0} is not supported by this view.", attribute.ProjectCustomAttributeDataType.ToEnum.ToString()));
                }
            }
        </div>
    </div>
}
