@*-----------------------------------------------------------------------
    <copyright file="ProjectRunningBalance.cshtml" company="Tahoe Regional Planning Agency and Sitka Technology Group">
    Copyright (c) Tahoe Regional Planning Agency and Sitka Technology Group. All rights reserved.
    <author>Sitka Technology Group</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using LtInfo.Common
@using ProjectFirma.Web.Models
@using ProjectFirma.Web.Views.Shared.ProjectRunningBalanceObligationsAndExpenditures
@using ProjectFirmaModels.Models
@inherits ProjectFirma.Web.Views.Shared.ProjectRunningBalanceObligationsAndExpenditures.ProjectRunningBalanceObligationsAndExpenditures

@functions {
    private HtmlString MakeHrefStringForBudgetObjectCode(BudgetObjectCode bdgetObjectCode)
    {
       string detailUrl = bdgetObjectCode != null ? bdgetObjectCode.GetDetailUrl() : string.Empty;
       string displayName = bdgetObjectCode != null ? bdgetObjectCode.GetDisplayName() : string.Empty;

       return UrlTemplate.MakeHrefString(detailUrl, displayName);
    }

   private string GetBudgetObjectCodeName(ProjectRunningBalanceObligationsAndExpendituresRecord prb)
   {
      return prb.BudgetObjectCode != null ? prb.BudgetObjectCode.BudgetObjectCodeName : string.Empty;
   }

}

<style>
    .tableFixedHead tbody { overflow-y: auto; height: 300px; }
    .tableFixedHead thead th { position: sticky; top: 0; background-color: #fff; }
</style>
    <div class="table-responsive" style="max-height: 450px;">
        <table class="table table-condensed table-bordered tableFixedHead">
           <thead>
              <tr>
                 @*<th scope="col">Items in Group</th>*@
                 <th scope="col">Fiscal Year</th>
                 <th scope="col">Fiscal Month Period</th>
                 <th scope="col">Fiscal Quarter</th>
                 <th scope="col">Commitments</th>
                 <th scope="col">Obligations</th>
                 <th scope="col">Expenditures</th>
                 <th scope="col">Undelivered Orders</th>
                 <th scope="col">Budget Object Code</th>
              </tr>
           </thead>
           @{
              double commitmentsTotal = 0;
              double obligationsTotal = 0;
              double expendituresTotal = 0;
              double undeliveredOrdersTotal = 0;
           }
           <tbody>

           @{
               // I tried doing this with a real grouping type, and not an anon object, so I could take care of all this in the ViewData and not the
               // front side. It went awry, I still don't know why, so forced into making anon type, which means we have to do grouping out here on
               // the front side. If you have knowledge for me, please share.
               //
               // SLG -- 5/26/2020

               var projectRunningBalanceObligationsAndExpendituresRecordsGrouped =
               ViewDataTyped.ProjectRunningBalanceObligationsAndExpendituresRecords.GroupBy(prb =>
                  new
                  {
                     prb.FiscalYear, 
                     prb.FiscalQuarter.FiscalQuarterNumber,
                     prb.FiscalMonthPeriod,
                     BudgetObjectCodeName = GetBudgetObjectCodeName(prb)
                  }).ToList();

               projectRunningBalanceObligationsAndExpendituresRecordsGrouped =
                  projectRunningBalanceObligationsAndExpendituresRecordsGrouped.
                          OrderBy(g => g.Key.FiscalYear)
                          .ThenBy(g => g.Key.FiscalMonthPeriod)
                          .ThenBy(g => g.Key.BudgetObjectCodeName)
                          .ToList();
           }

           @foreach (var prbacRecordGroup in projectRunningBalanceObligationsAndExpendituresRecordsGrouped)
           {
              int itemsInGroup = prbacRecordGroup.Count();
              var samplePrbacRecord = prbacRecordGroup.First();

              var currentBudgetObjectCode = samplePrbacRecord.BudgetObjectCode;
              int currentFiscalYear = samplePrbacRecord.FiscalYear;
              int currentFiscalQuarterNumber = samplePrbacRecord.FiscalQuarter.FiscalQuarterNumber;
              string currentFiscalQuarterDisplayName = samplePrbacRecord.FiscalQuarter.FiscalQuarterDisplayName;
              string currentFiscalQuarterFiscalYearDisplayString = currentFiscalQuarterDisplayName + " - " + currentFiscalYear;

              string currentFiscalMonthPeriodString = ViewDataTyped.GetFiscalMonthPeriodGridDisplayString(samplePrbacRecord.FiscalMonthPeriod);

              double currentCommitmentsForGroup = prbacRecordGroup.Sum(pg => pg.Commitments);
              double currentObligationsForGroup = prbacRecordGroup.Sum(pg => pg.Obligations);
              double currentExpendituresForGroup = prbacRecordGroup.Sum(pg => pg.Expenditures);
              double currentUndeliveredOrdersForGroup = prbacRecordGroup.Sum(pg => pg.UndeliveredOrders);

              commitmentsTotal += currentCommitmentsForGroup;
              obligationsTotal += currentObligationsForGroup;
              expendituresTotal -= currentExpendituresForGroup;
              undeliveredOrdersTotal += currentUndeliveredOrdersForGroup;

              <tr>
                 @*<td>@itemsInGroup</td>*@
                 <td>@currentFiscalYear</td>
                 <td>@currentFiscalMonthPeriodString</td>
                 <td>@currentFiscalQuarterDisplayName</td>
                 <td>@currentCommitmentsForGroup.ToStringCurrency()</td>
                 <td>@currentObligationsForGroup.ToStringCurrency()</td>
                 <td>@currentExpendituresForGroup.ToStringCurrency()</td>
                 <td>@currentUndeliveredOrdersForGroup.ToStringCurrency()</td>
                 <td>@MakeHrefStringForBudgetObjectCode(currentBudgetObjectCode)</td>
                 @*<td>[link to @currentBudgetObjectCodeName goes here])</td>*@
              </tr>
           }
           </tbody>

           <tfoot>
                <tr>
                    <th scope="row">Totals:</th>
                    <th scope="row">&nbsp;</th>
                    <th scope="row">&nbsp;</th>
                    @*<th scope="row">&nbsp;</th>*@
                    <th scope="col">@commitmentsTotal.ToStringCurrency()</th>
                    <th scope="col">@obligationsTotal.ToStringCurrency()</th>
                    <th scope="col">@expendituresTotal.ToStringCurrency()</th>
                    <th scope="col">@undeliveredOrdersTotal.ToStringCurrency()</th>
                </tr>
            </tfoot>
        </table>
    </div>







@*  *@