@*-----------------------------------------------------------------------
    <copyright file="ProjectRunningBalance.cshtml" company="Tahoe Regional Planning Agency and Sitka Technology Group">
    Copyright (c) Tahoe Regional Planning Agency and Sitka Technology Group. All rights reserved.
    <author>Sitka Technology Group</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using LtInfo.Common
@using Microsoft.Ajax.Utilities
@using Newtonsoft.Json.Linq
@using ProjectFirma.Web.Models
@using ProjectFirma.Web.Views.Shared.ProjectRunningBalanceObligationsAndExpenditures
@using ProjectFirmaModels.Models
@inherits ProjectFirma.Web.Views.Shared.ProjectBalanceBurnUp.ProjectBalanceBurnUp

@functions {
    

}




<style>
    .tableFixedHead tbody { overflow-y: auto; height: 300px; }
    .tableFixedHead thead th { position: sticky; top: 0; background-color: #fff; }
</style>
<div>

    <div id="BurnUpChart"></div>

</div>

<script src="https://d3js.org/d3.v5.min.js"></script>


<script type="text/javascript">
    var rawData = @Html.Raw(JObject.FromObject(ViewDataTyped.ProjectBurnUpChartData).ToString());
    var margin = {top: 50, right: 50, bottom: 50, left: 75}

    var width = 960;
    var height = 500;
    var dollarFormat = function (d) { return '$' + d3.format(",.0f")(d) };

    var timeConv = d3.timeParse("%m/%d/%Y 00:00:00");

    // lets set up the data into simple sets with keys and values
    var data = [];
    var keys = Object.keys(rawData);
    keys.forEach(function(key) {
        data.push({
            id: key,
            values: rawData[key]
        });
    });
    var svg = d3.select("#BurnUpChart")
        .append("svg")
        .attr("viewBox", [0, 0, width, height]);


    // Y Scale and Axis
    var yScale = d3.scaleLinear().rangeRound([height - margin.bottom, margin.top]);
    var allYValues = data.map(function(d) {
        return d.values.map(x => x.Value);
    }).flat();

    yScale.domain(
        [d3.min(allYValues), d3.max(allYValues) + (d3.max(allYValues) / 10)]
    );
    var yAxis = d3.axisLeft()
        .ticks(10)
        .tickFormat(dollarFormat)
        .scale(yScale);

    svg.append("g")
        .attr('class', "axis")
        .attr("transform", "translate(" + margin.left + ",0)")
        .call(yAxis)


    // X Scale and Axis
    var xScale = d3.scaleTime().range([margin.left, width - margin.right]);

    var allXValues = data.map(function (d) {
        return d.values.map(x => timeConv(x.Date));
    }).flat();
    xScale.domain(d3.extent(allXValues));
    var xAxis = d3.axisBottom(xScale)
        .ticks(d3.timeMonth.every(1))
        .tickFormat(d3.timeFormat('%b %Y'))


    svg.append("g")
        .attr('class', "axis")
        .attr("transform", "translate(0, " + (height - margin.bottom) + ")")
        .call(xAxis)
        .selectAll("text")
        .style("text-anchor", "end")
        .attr("dx", "-.8em")
        .attr("dy", ".15em")
        .attr("transform", "rotate(-65)");



    
    
    
</script>
