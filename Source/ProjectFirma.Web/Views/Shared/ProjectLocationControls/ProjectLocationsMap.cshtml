@*-----------------------------------------------------------------------
<copyright file="ProjectLocationsMap.cshtml" company="Tahoe Regional Planning Agency and Environmental Science Associates">
Copyright (c) Tahoe Regional Planning Agency and Environmental Science Associates. All rights reserved.
<author>Environmental Science Associates</author>
</copyright>

<license>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

Source code is available upon request via <support@sitkatech.com>.
</license>
-----------------------------------------------------------------------*@
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using ProjectFirma.Web.Common
@using ProjectFirma.Web.Models
@using ProjectFirmaModels.Models
@inherits ProjectFirma.Web.Views.Shared.ProjectLocationControls.ProjectLocationsMap

<style>
    .mapLegendContainer {
        padding: 5px;
    }

    .mapLegend {
        margin-top: 10px;
    }

    .mapLegendElement {
        display: inline-block;
        margin-right: 13px;
    }

    .mapLegendIcon
    {
        margin-bottom: -20px;
        margin-right: 2px
    }

    .mapLegendElement .maki-marker
    {
        background-color: blue;
        margin-left: 0 !important;
    }

    .mapLegendTitle {
        font-weight: bold;
    }

    /* customizing the look of the clusters*/

    .marker-cluster-small
    {
        background-color: #9e9e9e;
        opacity: 0.7;
    }

    .marker-cluster-small div
    {
        background-color: #9e9e9e;
        opacity: 0.7;
    }

    .marker-cluster-medium
    {
        background-color: #6e6e6e;
        opacity: 0.7;
    }

    .marker-cluster-medium div
    {
        background-color: #6e6e6e;
        opacity: 0.7;
    }

    .marker-cluster-large
    {
        background-color: #3e3e3e;
        opacity: 0.7;
    }

    .marker-cluster-large div
    {
        background-color: #3e3e3e;
        opacity: 0.7;
    }

    .marker-cluster div
    {
        color: #e0ffff;
        font-weight: 900;
    }
</style>


<div id="projectLocationsMapContainer_@ViewDataTyped.MapDivID">
    @if (ViewDataTyped.LegendAboveMap)
    {
        <div class="mapLegendContainer" style="padding-bottom: 15px; padding-top: 0">
            <span class="mapLegendTitle">
                @if (ViewDataTyped.LegendTitleFieldDefinition != null)
                {
                    @Html.LabelWithSugarFor(ViewDataTyped.LegendTitleFieldDefinition)
                }
            </span>
            <div class="mapLegend">
            </div>
        </div>
    }
    <div style="font-weight: bold; margin-top: 10px" id="ClusterLocationsContainer">
        <input style="margin-right: 5px" type="checkbox" id="ClusterLocations" checked="checked" /><label>Cluster @FieldDefinitionEnum.ProjectLocation.ToType().GetFieldDefinitionLabelPluralized()</label>
    </div>
    <div id="@ViewDataTyped.MapDivID"></div>
    @if (!ViewDataTyped.LegendAboveMap)
    {
        <div class="mapLegendContainer">
            <span class="mapLegendTitle">
                @if (ViewDataTyped.LegendTitleFieldDefinition != null)
                {
                    @Html.LabelWithSugarFor(ViewDataTyped.LegendTitleFieldDefinition)
                }
            </span>
            <div class="mapLegend">
            </div>
        </div>
    }
</div>

<script type="text/javascript">
    // we are extending ProjectFirma Maps here with functionality specific to this partial view
    ProjectFirmaMaps.Map.prototype.initializeProjectLocations = function(projectLocationsMapInitJson)
    {
        if (Sitka.Methods.isUndefinedNullOrEmpty(projectLocationsMapInitJson.ProjectMapCustomization))
        {
            throw new Error("No map customization object defined!");
        }
        this.legendColorsToUse = @Html.Raw(JObject.FromObject(ViewDataTyped.LegendFormats).ToString(Formatting.None));

        // default to clustering
        this.areLocationsClustered = true;
        // set the project locations
        this.projectLocations = projectLocationsMapInitJson.ProjectLocationsLayerGeoJson;

        // initialize to no filters
        this.mapCustomizationObject = projectLocationsMapInitJson.ProjectMapCustomization;
        // draw the project locations
        this.addLocationLayers();

        // prevent standard popup for lat/long when clicking on general map area (not features)
//        this.removeClickEventHandler();
    };

    ProjectFirmaMaps.Map.prototype.changeFilter = function(filterPropertyNameSelected, actualFilter)
    {        
        this.mapCustomizationObject.FilterPropertyName = filterPropertyNameSelected;
        this.mapCustomizationObject.FilterPropertyValues = actualFilter;
        this.addLocationLayers();        
    };

    ProjectFirmaMaps.Map.prototype.changePropertyToColorProjectLocationsBy = function(colorByPropertyName)
    {
        this.mapCustomizationObject.ColorByPropertyName = colorByPropertyName;
        this.addLocationLayers();        
    };

    ProjectFirmaMaps.Map.prototype.changeClustering = function(areLocationsClustered)
    {
        this.areLocationsClustered = areLocationsClustered;
        this.addLocationLayers();        
    };

    ProjectFirmaMaps.Map.prototype.addLocationLayers = function()
    {
        this.projectLocationsLayer = this.addProjectLocationsToMap(this.projectLocations, this.projectLocationsLayer, "Mapped @(FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabelPluralized())", true);
    }

    ProjectFirmaMaps.Map.prototype.addProjectLocationsToMap = function(points, layer, layerName, showByDefault)
    {
        var firmaMap = this;
        if (layer != null)
        {
            this.map.removeLayer(layer);
            this.layerControl.removeLayer(layer);
        }

        var markerColorTable = this.legendColorsToUse[this.mapCustomizationObject.ColorByPropertyName];
        var markerClusterGroup = L.markerClusterGroup({ maxClusterRadius: 40 });
        var newLayer = L.geoJson(points.GeoJsonFeatureCollection, {
            pointToLayer: function(feature, latlng)
            {
                var legendColor = _.result(_.find(markerColorTable, function(legendItem) { return legendItem.LegendID == feature.properties[firmaMap.mapCustomizationObject.ColorByPropertyName]; }), 'LegendColor');
                var marker = L.marker(latlng, { icon: L.MakiMarkers.icon({ icon: "marker", color: legendColor, size: "s" }) });
                firmaMap.bindPopupToFeature(marker, feature);
                return marker;
            },
            filter: function(feature)
            {
                var b = !!Sitka.Methods.isUndefinedNullOrEmpty(firmaMap.mapCustomizationObject.FilterPropertyName) ||
                    _.intersection(
                        _.map(feature.properties[firmaMap.mapCustomizationObject.FilterPropertyName].split(","), Number),
                        _.map(firmaMap.mapCustomizationObject.FilterPropertyValues, Number))
                        .length > 0;
                return b;
            }
        });
        if (this.areLocationsClustered)
        {
            newLayer.addTo(markerClusterGroup);
            layer = markerClusterGroup;
        }
        else
        {
            layer = newLayer;
        }
        
        if (showByDefault)
        {
            layer.addTo(this.map);    
        }
        
        this.layerControl.addOverlay(layer, layerName);

        jQuery("#projectLocationsMapContainer_" + this.MapDivId)
            .find(".mapLegend")
            .html(this.getLegend());

        return layer;
    };

    ProjectFirmaMaps.Map.prototype.getLegend = function() {
        var markerColorTable = this.legendColorsToUse[this.mapCustomizationObject.ColorByPropertyName];
        var allLegendsHtml = "";
        for (var i = 0; i < markerColorTable.length; ++i)
        {
            var currentLegendIcon = L.MakiMarkers.icon({ icon: "marker", color: markerColorTable[i].LegendColor, size: "s" }),
                currentLegendAsHtml = currentLegendIcon.options.iconUrl;
            allLegendsHtml += "<div class=\"mapLegendElement\">" + "<img class='mapLegendIcon' src= '" + currentLegendAsHtml  + "'></img>" + markerColorTable[i].LegendText + "</div>";
        }
        return allLegendsHtml;
    };
</script>
